#include <lcthw/list_algos.h>
#include <lcthw/dbg.h>

inline void ListNode_swap(ListNode *a, ListNode *b)
{
	void *temp = a->value;
	a->value = b->value;
	b->value = temp;
}


bool List_bubble_sort(List * list, List_compare cmp)
{
	check(list != NULL, "Invalid list.");
	bool sorted = false;	
	if(List_count(list) <= 1) {
		sorted = true;
		return sorted;
	}
	
	do	{
		sorted = false;
		LIST_FOREACH(list, first, next, cur) {
			if(cur->next) {
				if(cmp(cur->value, cur->next->value)> 0) {
					ListNode_swap(cur, cur->next);
					sorted=true;
				}
			}
		}
	}while(sorted == true);
	
error: //fallthrough
return sorted;	

}
/*
procedure bubbleSort( A : list of sortable items )
   n = length(A)
   repeat 
     swapped = false
     for i = 1 to n-1 inclusive do
        if this pair is out of order 
       if A[i-1] > A[i] then
          swap them and remember something changed 
         swap( A[i-1], A[i] )
         swapped = true
       end if
     end for
   until not swapped
end procedure
*/


